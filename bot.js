import { Telegraf, Markup } from "telegraf";
import { fetchAds } from "./parser.js";
import { readFileSync, writeFileSync } from "fs";
import puppeteer from "puppeteer";

console.log(
  "BOT_TOKEN —É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ:",
  process.env.BOT_TOKEN ? "–û–ö" : "–í—ñ–¥—Å—É—Ç–Ω—ñ–π"
);

const browser = await puppeteer.launch({
  headless: true,
  args: ["--no-sandbox", "--disable-setuid-sandbox"],
  executablePath: process.env.CHROME_PATH || puppeteer.executablePath(),
});

const bot = new Telegraf(process.env.BOT_TOKEN, { handlerTimeout: 180000 });

let seen = [];
let searchEnabled = true;

try {
  seen = JSON.parse(readFileSync("seen.json", "utf-8"));
} catch (e) {
  seen = [];
}

function saveSeen() {
  console.log("–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è seen.json:", seen);
  writeFileSync("seen.json", JSON.stringify(seen.slice(0, 100), null, 2));
}

async function checkAds(ctx) {
  if (!searchEnabled) {
    if (ctx) {
      await ctx.reply(
        "üîï –ü–æ—à—É–∫ –æ–≥–æ–ª–æ—à–µ–Ω—å –≤–∏–º–∫–Ω–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´üîç –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –ø–æ—à—É–∫¬ª, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏."
      );
    }
    return;
  }

  console.log("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å –Ω–∞ OLX...");

  try {
    const ads = await fetchAds(seen);
    const newAds = ads.filter((ad) => !seen.includes(ad.link));

    if (newAds.length === 0) {
      if (ctx) {
        await ctx.reply("‚ÑπÔ∏è –ù–æ–≤–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 15 —Ö–≤–∏–ª–∏–Ω –Ω–µ–º–∞—î.");
      }
      return;
    }

    for (const ad of newAds) {
      const message = `
      üèó *${ad.offerTitle || ad.title}*
      üë§ –ê–≤—Ç–æ—Ä: *${ad.name || "–Ω–µ–≤—ñ–¥–æ–º–æ"}*
      üìç –ú—ñ—Å—Ç–æ: ${ad.location || "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"}
      üìÖ –î–∞—Ç–∞ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è: ${ad.date || "–Ω–µ–≤—ñ–¥–æ–º–æ"}
      `;

      await ctx.reply(message, {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [{ text: "üîó –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è", url: ad.link }],
          ],
        },
      });

      seen.unshift(ad.link);
    }

    saveSeen();

    await ctx.reply(`‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ ${newAds.length} –Ω–æ–≤–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å.`);
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–≥–æ–ª–æ—à–µ–Ω—å:", error.message);
    if (ctx) {
      ctx.reply("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –æ–≥–æ–ª–æ—à–µ–Ω—å.");
    }
  }
}

const mainMenu = Markup.keyboard([
  ["üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è"],
  ["üõë –ó—É–ø–∏–Ω–∏—Ç–∏ –ø–æ—à—É–∫", "üîÑ –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –ø–æ—à—É–∫"],
]).resize();

// –°—Ç–∞—Ä—Ç
bot.start((ctx) => {
  ctx.reply(
    `üëã –í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å –∑ OLX (–ø–æ—Å–ª—É–≥–∏ —Ä–µ–º–æ–Ω—Ç—É, –ö–∏—ó–≤).
–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.`,
    mainMenu
  );
});

bot.hears("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è", async (ctx) => {
  await ctx.reply("‚è≥ –®—É–∫–∞—é –Ω–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è...");
  await checkAds(ctx);
});

bot.command("check", async (ctx) => {
  await ctx.reply("‚è≥ –®—É–∫–∞—é –Ω–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è...");
  await checkAds(ctx);
});

bot.telegram.setMyCommands([
  { command: "check", description: "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è" },
]);

bot.hears("üõë –ó—É–ø–∏–Ω–∏—Ç–∏ –ø–æ—à—É–∫", async (ctx) => {
  searchEnabled = false;
  await ctx.reply("üõë –ü–æ—à—É–∫ –Ω–æ–≤–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å –∑—É–ø–∏–Ω–µ–Ω–æ.");
});

bot.hears("üîÑ –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –ø–æ—à—É–∫", async (ctx) => {
  searchEnabled = true;
  await ctx.reply(
    "üîÑ –ü–æ—à—É–∫ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ. –¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –∑–Ω–æ–≤—É –Ω–∞—Ç–∏—Å–∫–∞—Ç–∏ ¬´üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è¬ª."
  );
});

bot.telegram.setMyDescription(
  "–¶–µ–π –±–æ—Ç –ø–æ–∫–∞–∑—É—î –Ω–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ OLX –ø—Ä–æ —Ä–µ–º–æ–Ω—Ç–Ω—ñ –ø–æ—Å–ª—É–≥–∏ —É –ö–∏—î–≤—ñ."
);
bot.telegram.setChatMenuButton({ type: "commands" });

bot
  .launch()
  .then(() => console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ"))
  .catch((err) => console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞:", err.message));
